import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import axios, { AxiosResponse } from 'axios';
import { RootState, AppThunk } from '../store';
import { IBook, IBooksData, IFetchBooksProps } from './booksSearchTypes';

export interface IBooksSearchState {
    booksData: IBook[];
    status: 'idle' | 'loading' | 'failed';
    number: number;
    foundBooksNumber: number,
}

const initialState: IBooksSearchState = {
    booksData: [],
    status: 'idle',
    number: 0,
    foundBooksNumber: 0,
};


const apiKey = process.env.REACT_APP_API_KEY
const booksUrl = 'https://www.googleapis.com/books/v1/volumes/'
const q = 'js'

export const fetchBooks = createAsyncThunk(
    'booksSearch/fetchBooks',
    async ({ bookName, category, sortBy }: IFetchBooksProps, { rejectWithValue, dispatch }) => {
        console.log('fetchBooks', process.env.REACT_APP_API_KEY_TWO)
        dispatch(increment())
        try {
            const response: AxiosResponse<IBooksData, any> = await axios({
                method: 'get',
                url: `https://www.googleapis.com/books/v1/volumes?q=${bookName}:keyes&key=${apiKey}`
            });

            dispatch(setTotalBooksNumber(response.data.totalItems))
            dispatch(setBooksData(response.data.items))
            console.log(response.data)

        } catch (error: any) {
            return rejectWithValue(error.message)
        }
        // const response = await fetchCount(amount);
        // // The value we return becomes the `fulfilled` action payload
        // return response.data;
    }
);

export const booksSearchSlice = createSlice({
    name: 'booksSearch',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        increment: (state) => {
            // // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // // doesn't actually mutate the state because it uses the Immer library,
            // // which detects changes to a "draft state" and produces a brand new
            // // immutable state based off those changes
            state.number += 1;
        },
        decrement: (state) => {
            // state.value -= 1;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        setBooksData: (state, action: PayloadAction<IBook[]>) => {
            state.booksData = action.payload
        },

        setTotalBooksNumber: (state, action: PayloadAction<number>) => {
            state.foundBooksNumber = action.payload
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchBooks.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchBooks.fulfilled, (state, action) => {
                state.status = 'idle';
                console.log('action payload fulfiled', action.payload);
            })
            .addCase(fetchBooks.rejected, (state, action) => {
                state.status = 'failed';
                console.log('action payload rejected', action.payload);
            });
    },
});

export const { increment, decrement, setTotalBooksNumber, setBooksData } = booksSearchSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//         (dispatch, getState) => {
//             const currentValue = selectCount(getState());
//             if (currentValue % 2 === 1) {
//                 dispatch(incrementByAmount(amount));
//             }
//         };

export default booksSearchSlice.reducer;